#include <QDebug>
#include <QTableWidget>
#include <QNetworkReply>
#include <QNetworkRequest>
#include <QMessageBox>
#include <QDateTime>
#include <QJsonDocument>
#include <QJsonObject>
#include <QJsonArray>
#include <QFileDialog>
#include <QTableWidgetItem>
#include <QTableWidget>
#include <QToolButton>
#include <QIcon>
#include <QStringList>
#include <QPainter>
#include <QListWidget>
#include <QListWidgetItem>
#include <QCryptographicHash>
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "common.h"

//上传过程中每次上传的字节数为20k
#define TRANS_BUFF_SIZE  1024*20

MainWindow::MainWindow(QWidget *parent) :QWidget(parent),ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    this->setWindowFlags(Qt::FramelessWindowHint|this->windowFlags());
    /*
    shm.setKey(tr("shm_user"));
    shm.attach();
    char *p_shm_user=(char*)shm.data();
    if(!shm.isAttached())
    {
        QMessageBox::about(this,tr("error"),tr("Login User Not Found"));
        exit(0);
    }
    memcpy(&log_user,p_shm_user,sizeof(log_user));
    */
    QString username;
    username="Sanji";
    log_user.SetName(username);
    log_user.SetUid(2);
    //username=log_user.GetName();
    this->ui->left_wg->SetUserName(username);

    this->netman =Common::GetNetManager();

    connect(this->ui->left_wg,&MainHeader::SigGetFileList,this,&this->GetFileList);
    connect(this->ui->left_wg,&MainHeader::SigToUpload,this,&this->ToUpload);
    connect(this->ui->left_wg,&MainHeader::SigGetMyShare,this,&this->GetMyShare);
    connect(this->ui->left_wg,&MainHeader::SigGetShares,this,&this->GetShares);
    connect(this->ui->left_wg,&MainHeader::SigGetTransRecord,this,&this->GetTransRecord);

    ui->listWidget->setViewMode(QListView::IconMode);   //设置显示图标模式
    ui->listWidget->setIconSize(QSize(80, 80));         //设置图标大小
    ui->listWidget->setGridSize(QSize(120, 120));       //设置item大小

    // 设置QLisView大小改变时，图标的调整模式，默认是固定的，可以改成自动调整
    ui->listWidget->setResizeMode(QListView::Adjust);   //自动适应布局
    // 设置列表可以拖动，如果想固定不能拖动，使用QListView::Static
    ui->listWidget->setMovement(QListView::Static);

    // listWidget 右键菜单
    // 发出 customContextMenuRequested 信号
    ui->listWidget->setContextMenuPolicy(Qt::CustomContextMenu);

    GetFileList(0);

}

void MainWindow::GetFileList(int index)
{
    this->ui->stackedWidget->setCurrentIndex(index);
    this->ui->listWidget->clear();
    QString req_url=QString("http://192.168.82.25:80/filelist");
    QUrl url(req_url);
    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader,"application/json;charset=utf-8");
    request.setHeader(QNetworkRequest::UserAgentHeader,"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) \
                      Chrome/59.0.3071.115 Safari/537.36");
                      QString req_str=QString("{\"uid\":%1,\"timespan\":%2,\"token\":\"this is token\"}")
            .arg(QString::number(log_user.GetUid()))
            .arg(QString::number(QDateTime::currentDateTime().toTime_t()));
            qDebug()<<"get file list request data: "<<req_str;

    QNetworkReply* reply = this->netman->post(request,req_str.toUtf8());
    connect(reply, &QNetworkReply::readyRead, [=](){

        if(reply->error() !=QNetworkReply::NoError)
        {
            QMessageBox::about(this,tr("error"),tr("net link failed"));
            qDebug()<<"net work errorno:"<<reply->error();
            return;
        }
        if(reply->isReadable())
        {
            // 读sever回写的数据
            QByteArray jsonData = reply->readAll();
            qDebug()<<jsonData;
            QJsonDocument doc=QJsonDocument::fromJson(jsonData);
            if(!doc.isObject())
            {
                QMessageBox::about(this,tr("error"),tr("recv data from server error!"));
                return;
            }
            QJsonObject obj=doc.object();
            if(obj.value("status").toInt()!=0)
            {
                QMessageBox::about(this,tr("error"),tr("Get data from server error!"));
                return;
            }
            qDebug()<<obj.value("status").toInt();
            int count=0,i=0;
            count=obj.value("count").toInt();
            qDebug()<<"count is "<<count;
            if(!obj.value("list").isArray())
            {
                QMessageBox::about(this,tr("error"),tr("Get list data from server error\ntry again!"));
                return;
            }
            QJsonArray list=obj.value("list").toArray();
            for(i=0;i<count;++i)
            {
                QJsonObject user=list.at(i).toObject();
                if(user.empty())
                {
                    QMessageBox::about(this,tr("error"),tr("Analysis data error\ntry again!"));
                    return;
                }
                QIcon icon(":/resource/filetype/jpg.png");
                QListWidgetItem *item=new QListWidgetItem;
                item->setToolTip(user.value(tr("localname")).toString());
                item->setIcon(icon);
                item->setText(user.value(tr("localname")).toString());
                QHBoxLayout hlay;
                hlay.setMargin(10);
                this->ui->listWidget->addItem(item);
                //  item->
                qDebug()<<user.value("localname").toString();
            }
        }

    });

}

void MainWindow::GetMyShare(int index)
{
    this->ui->stackedWidget->setCurrentIndex(index);
}

void MainWindow::GetShares(int index)
{
    this->ui->stackedWidget->setCurrentIndex(index);
}

void MainWindow::GetTransRecord(int index)
{
    this->ui->stackedWidget->setCurrentIndex(index);
    this->ui->tabWidget->setCurrentIndex(0);
}

void MainWindow::ToUpload(int index)
{
    this->ui->stackedWidget->setCurrentIndex(index);

    QStringList filenames=QFileDialog::getOpenFileNames(this,tr("Select want upload files"),tr("F:/"));
    if(filenames.length()<1)
    {
        qDebug()<<"Not select file";
        return;
    }
    /* 上传报文
     * 0 首次上传 1没有后续数据，结束上传
        {"action":0,"localname":"shishi.jpg","filetype":2,"filesize":23353,"data":"","datalen":6465,"filehash":"ljglfg","user":{"name":"sanji","uid":2,"checkhash":"lkjlj"}}
    *询问报文
    * {"filesize":1321546,"filehash":"glanvljaey","user":{"name":"sanji","uid":2,"checkhash":"lkjlj"}}
 */
    int i;
    for(i=0;i<filenames.length();++i)
    {
        QFile file(filenames.at(i));
        if(!file.open(QFile::ReadOnly))
        {
            QMessageBox::about(this,tr("file error"),filenames.at(i)+" open failed");
            qDebug()<<filenames.at(i)<<" open failed\n";
            return;
        }
        QByteArray file_arr=file.readAll();
         QByteArray filehash= QCryptographicHash::hash(file_arr,QCryptographicHash::Md5);
         QString hashstr(filehash.toHex());
        qDebug()<<filenames.at(i);

    }

}

void MainWindow::mouseMoveEvent(QMouseEvent *event)
{
    // 只允许左键拖动
    if(event->buttons() & Qt::LeftButton)
    {
        // 窗口跟随鼠标移动
        // 窗口左上角点 = 鼠标当前位置 - 差值
        this->move(event->globalPos() - m_pt);
    }

}

void MainWindow::mousePressEvent(QMouseEvent *event)
{
    // 如果鼠标左键按下
    if(event->button() == Qt::LeftButton)
    {
        // 求差值 = 鼠标当前位置 - 窗口左上角点
        m_pt = event->globalPos() - this->geometry().topLeft();
    }
}

void MainWindow::paintEvent(QPaintEvent *event)
{
    QPainter painter(this);
    QPixmap bk(":/resource/title_bk3.jpg");
    painter.drawPixmap(0, 0, width(), height(), bk);
}

void MainWindow::closeEvent(QCloseEvent *event)
{
    qDebug()<<"Execute closeEvent";
    if(shm.isAttached())
    {
        shm.detach();
    }
}

MainWindow::~MainWindow()
{
    delete ui;
}

