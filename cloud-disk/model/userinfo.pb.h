// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserInfo.proto

#ifndef PROTOBUF_UserInfo_2eproto__INCLUDED
#define PROTOBUF_UserInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;

namespace protobuf_UserInfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_UserInfo_2eproto

// ===================================================================

class UserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UserInfo) */ {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UserInfo* other);
  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  UserInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string empnum = 2;
  bool has_empnum() const;
  void clear_empnum();
  static const int kEmpnumFieldNumber = 2;
  const ::std::string& empnum() const;
  void set_empnum(const ::std::string& value);
  #if LANG_CXX11
  void set_empnum(::std::string&& value);
  #endif
  void set_empnum(const char* value);
  void set_empnum(const char* value, size_t size);
  ::std::string* mutable_empnum();
  ::std::string* release_empnum();
  void set_allocated_empnum(::std::string* empnum);

  // required string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string phone = 5;
  bool has_phone() const;
  void clear_phone();
  static const int kPhoneFieldNumber = 5;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // optional string email = 7;
  bool has_email() const;
  void clear_email();
  static const int kEmailFieldNumber = 7;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // optional string address = 8;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required int32 sex = 4;
  bool has_sex() const;
  void clear_sex();
  static const int kSexFieldNumber = 4;
  ::google::protobuf::int32 sex() const;
  void set_sex(::google::protobuf::int32 value);

  // optional int64 born = 6;
  bool has_born() const;
  void clear_born();
  static const int kBornFieldNumber = 6;
  ::google::protobuf::int64 born() const;
  void set_born(::google::protobuf::int64 value);

  // required int32 cur_state = 9;
  bool has_cur_state() const;
  void clear_cur_state();
  static const int kCurStateFieldNumber = 9;
  ::google::protobuf::int32 cur_state() const;
  void set_cur_state(::google::protobuf::int32 value);

  // required int32 dept = 10;
  bool has_dept() const;
  void clear_dept();
  static const int kDeptFieldNumber = 10;
  ::google::protobuf::int32 dept() const;
  void set_dept(::google::protobuf::int32 value);

  // required int32 title = 11;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 11;
  ::google::protobuf::int32 title() const;
  void set_title(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_empnum();
  void clear_has_empnum();
  void set_has_name();
  void clear_has_name();
  void set_has_sex();
  void clear_has_sex();
  void set_has_phone();
  void clear_has_phone();
  void set_has_born();
  void clear_has_born();
  void set_has_email();
  void clear_has_email();
  void set_has_address();
  void clear_has_address();
  void set_has_cur_state();
  void clear_has_cur_state();
  void set_has_dept();
  void clear_has_dept();
  void set_has_title();
  void clear_has_title();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr empnum_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int64 born_;
  ::google::protobuf::int32 cur_state_;
  ::google::protobuf::int32 dept_;
  ::google::protobuf::int32 title_;
  friend struct protobuf_UserInfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserInfo

// required int32 id = 1;
inline bool UserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserInfo::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UserInfo::id() const {
  // @@protoc_insertion_point(field_get:UserInfo.id)
  return id_;
}
inline void UserInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.id)
}

// required string empnum = 2;
inline bool UserInfo::has_empnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_empnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_empnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_empnum() {
  empnum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_empnum();
}
inline const ::std::string& UserInfo::empnum() const {
  // @@protoc_insertion_point(field_get:UserInfo.empnum)
  return empnum_.GetNoArena();
}
inline void UserInfo::set_empnum(const ::std::string& value) {
  set_has_empnum();
  empnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.empnum)
}
#if LANG_CXX11
inline void UserInfo::set_empnum(::std::string&& value) {
  set_has_empnum();
  empnum_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.empnum)
}
#endif
inline void UserInfo::set_empnum(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_empnum();
  empnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.empnum)
}
inline void UserInfo::set_empnum(const char* value, size_t size) {
  set_has_empnum();
  empnum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.empnum)
}
inline ::std::string* UserInfo::mutable_empnum() {
  set_has_empnum();
  // @@protoc_insertion_point(field_mutable:UserInfo.empnum)
  return empnum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_empnum() {
  // @@protoc_insertion_point(field_release:UserInfo.empnum)
  clear_has_empnum();
  return empnum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_empnum(::std::string* empnum) {
  if (empnum != NULL) {
    set_has_empnum();
  } else {
    clear_has_empnum();
  }
  empnum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), empnum);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.empnum)
}

// required string name = 3;
inline bool UserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:UserInfo.name)
  return name_.GetNoArena();
}
inline void UserInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.name)
}
#if LANG_CXX11
inline void UserInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.name)
}
#endif
inline void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.name)
}
inline void UserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.name)
}
inline ::std::string* UserInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:UserInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.name)
}

// required int32 sex = 4;
inline bool UserInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 UserInfo::sex() const {
  // @@protoc_insertion_point(field_get:UserInfo.sex)
  return sex_;
}
inline void UserInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.sex)
}

// required string phone = 5;
inline bool UserInfo::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phone();
}
inline const ::std::string& UserInfo::phone() const {
  // @@protoc_insertion_point(field_get:UserInfo.phone)
  return phone_.GetNoArena();
}
inline void UserInfo::set_phone(const ::std::string& value) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.phone)
}
#if LANG_CXX11
inline void UserInfo::set_phone(::std::string&& value) {
  set_has_phone();
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.phone)
}
#endif
inline void UserInfo::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.phone)
}
inline void UserInfo::set_phone(const char* value, size_t size) {
  set_has_phone();
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.phone)
}
inline ::std::string* UserInfo::mutable_phone() {
  set_has_phone();
  // @@protoc_insertion_point(field_mutable:UserInfo.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_phone() {
  // @@protoc_insertion_point(field_release:UserInfo.phone)
  clear_has_phone();
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    set_has_phone();
  } else {
    clear_has_phone();
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.phone)
}

// optional int64 born = 6;
inline bool UserInfo::has_born() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserInfo::set_has_born() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserInfo::clear_has_born() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserInfo::clear_born() {
  born_ = GOOGLE_LONGLONG(0);
  clear_has_born();
}
inline ::google::protobuf::int64 UserInfo::born() const {
  // @@protoc_insertion_point(field_get:UserInfo.born)
  return born_;
}
inline void UserInfo::set_born(::google::protobuf::int64 value) {
  set_has_born();
  born_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.born)
}

// optional string email = 7;
inline bool UserInfo::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserInfo::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserInfo::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserInfo::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
inline const ::std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:UserInfo.email)
  return email_.GetNoArena();
}
inline void UserInfo::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.email)
}
#if LANG_CXX11
inline void UserInfo::set_email(::std::string&& value) {
  set_has_email();
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.email)
}
#endif
inline void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.email)
}
inline void UserInfo::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.email)
}
inline ::std::string* UserInfo::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:UserInfo.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:UserInfo.email)
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.email)
}

// optional string address = 8;
inline bool UserInfo::has_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserInfo::set_has_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserInfo::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& UserInfo::address() const {
  // @@protoc_insertion_point(field_get:UserInfo.address)
  return address_.GetNoArena();
}
inline void UserInfo::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UserInfo.address)
}
#if LANG_CXX11
inline void UserInfo::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UserInfo.address)
}
#endif
inline void UserInfo::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UserInfo.address)
}
inline void UserInfo::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UserInfo.address)
}
inline ::std::string* UserInfo::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:UserInfo.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserInfo::release_address() {
  // @@protoc_insertion_point(field_release:UserInfo.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserInfo::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:UserInfo.address)
}

// required int32 cur_state = 9;
inline bool UserInfo::has_cur_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserInfo::set_has_cur_state() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserInfo::clear_has_cur_state() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserInfo::clear_cur_state() {
  cur_state_ = 0;
  clear_has_cur_state();
}
inline ::google::protobuf::int32 UserInfo::cur_state() const {
  // @@protoc_insertion_point(field_get:UserInfo.cur_state)
  return cur_state_;
}
inline void UserInfo::set_cur_state(::google::protobuf::int32 value) {
  set_has_cur_state();
  cur_state_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.cur_state)
}

// required int32 dept = 10;
inline bool UserInfo::has_dept() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserInfo::set_has_dept() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserInfo::clear_has_dept() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserInfo::clear_dept() {
  dept_ = 0;
  clear_has_dept();
}
inline ::google::protobuf::int32 UserInfo::dept() const {
  // @@protoc_insertion_point(field_get:UserInfo.dept)
  return dept_;
}
inline void UserInfo::set_dept(::google::protobuf::int32 value) {
  set_has_dept();
  dept_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.dept)
}

// required int32 title = 11;
inline bool UserInfo::has_title() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserInfo::set_has_title() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserInfo::clear_title() {
  title_ = 0;
  clear_has_title();
}
inline ::google::protobuf::int32 UserInfo::title() const {
  // @@protoc_insertion_point(field_get:UserInfo.title)
  return title_;
}
inline void UserInfo::set_title(::google::protobuf::int32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:UserInfo.title)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserInfo_2eproto__INCLUDED
